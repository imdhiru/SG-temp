import { createSlice } from "@reduxjs/toolkit";
import {taxStoreModel} from '../model/common-model'
const initialState: taxStoreModel = {
        maxCount: 5,
        count: 0,
        fields: []
};
 
const tax = createSlice({
        name: "tax",
        initialState,
        reducers: {
                addTaxFiled(state, action) {
                        state.fields.push(action.payload);
                },
                updateCount(state, action) {
                        state.count = action.payload;
                },
                removeTaxField(state, action) {
                        Iif (state.count > 0) {
                                state.count = --state.count;
                                let findIndex = state.fields.findIndex(
                                        (field: string) => field === action.payload
                                );
                                state.fields.splice(findIndex, 2);
                        }
                },
                updateTax(state, action) {
                        Eif (action.payload) {
                                let count = 0;
                                let i = 1;
                                while (i < 5) {
                                        const CountyTaxValue = action.payload[`country_of_tax_residence_${i}_a_1`];
                                        if (CountyTaxValue) {
                                                count++;
                                                state.fields.push(`country_of_tax_residence_${i}`);
                                                state.fields.push(`tax_id_no_${i}`);
                                        } 
                                        i++;
                                }
                                state.count = count;
                        }
                }
        }
});
export const taxAction = tax.actions;
export default tax;


import taxReducer, { taxAction } from "./taxSlice";

describe("taxSlice reducer", () => {
  const initialState = {
    maxCount: 5,
    count: 0,
    fields: [],
  };

  it("should handle initial state", () => {
    expect(taxReducer(undefined, { type: undefined })).toEqual(initialState);
  });

  it("should handle addTaxField action", () => {
    const payload = "field1";
    const action = taxAction.addTaxFiled(payload);

    const updatedState = taxReducer(initialState, action);

    expect(updatedState.fields).toHaveLength(1);
    expect(updatedState.fields[0]).toEqual(payload);
  });

  it("should handle updateCount action", () => {
    const payload = 3;
    const action = taxAction.updateCount(payload);

    const updatedState = taxReducer(initialState, action);

    expect(updatedState.count).toEqual(payload);
  });

  it("should handle removeTaxField action", () => {
    const initialStateWithFields = {
      maxCount: 5,
      count: 2,
      fields: ["field1", "field2", "field3"],
    };

    const payload = "field2";
    const action = taxAction.removeTaxField(payload);

    const updatedState = taxReducer(initialStateWithFields, action);

    expect(updatedState.count).toEqual(1);
    expect(updatedState.fields).toEqual(["field1"]);
  });

  it("should handle updateTax action with valid payload", () => {
    const payload = {
      country_of_tax_residence_1_a_1: "US",
      country_of_tax_residence_2_a_1: "UK",
    };
    const action = taxAction.updateTax(payload);

    const updatedState = taxReducer(initialState, action);

    expect(updatedState.count).toEqual(2);
    expect(updatedState.fields).toEqual([
      "country_of_tax_residence_1",
      "tax_id_no_1",
      "country_of_tax_residence_2",
      "tax_id_no_2",
    ]);
  });

  it("should handle updateTax action with empty payload", () => {
    const payload = {};
    const action = taxAction.updateTax(payload);

    const updatedState = taxReducer(initialState, action);

    expect(updatedState.count).toEqual(0);
    expect(updatedState.fields).toEqual([]);
  });
});
