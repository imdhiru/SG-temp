const mockStore = configureStore([]);

describe("ThankYou Component", () => {
  let store: any;

  beforeEach(() => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              application: {
                application_reference: "12345",
              },
              products: [
                {
                  product_category: "CC",
                  name: "Credit Card",
                  product_sequence_number: "001",
                  product_type: "CC",
                  acct_details: [
                    {
                      account_number: "1234567890",
                      card_no: "9876543210",
                    },
                  ],
                },
              ],
              applicants: {
                embossed_name_a_1: "John Doe",
              },
            },
            stageId: "stage-1",
            isDocumentUpload: false,
          },
        ],
      },
    });
  });

  it("renders ThankYou component correctly", () => {
    const wrapper = mount(
      <Provider store={store}>
        <ThankYou />
      </Provider>
    );

    // Check if the component renders without errors
    expect(wrapper.exists()).toBe(true);
  });

  it("renders ThankYouUpload when 'auth' is 'upload' or isDocumentUpload is true", () => {
    store = mockStore({
      stages: {
        stages: [
          {
            stageInfo: {
              application: {
                application_reference: "12345",
              },
              products: [
                {
                  product_category: "CC",
                  name: "Credit Card",
                  product_sequence_number: "001",
                  product_type: "CC",
                  acct_details: [
                    {
                      account_number: "1234567890",
                      card_no: "9876543210",
                    },
                  ],
                },
              ],
            },
            stageId: "stage-1",
            isDocumentUpload: true, // Updated to true for this test case
          },
        ],
      },
    });

    const wrapper = mount(
      <Provider store={store}>
        <ThankYou />
      </Provider>
    );

    // Expect ThankYouUpload component to render
    expect(wrapper.find(ThankYouUpload).length).toBe(1);
  });

  it("renders ThankYouCC when productCategory is 'CC'", () => {
    const wrapper = mount(
      <Provider store={store}>
        <ThankYou />
      </Provider>
    );

    // Expect ThankYouCC component to render for Credit Card category
    expect(wrapper.find(ThankYouCC).length).toBe(1);
  });

  it("shows Continue without Activation popup", () => {
    const wrapper = mount(
      <Provider store={store}>
        <ThankYou />
      </Provider>
    );

    // Simulate click on 'continue without activation'
    wrapper.find('button').simulate('click');
    // Check if the popup is displayed
    expect(wrapper.find(PopupModel).exists()).toBe(true);
    expect(wrapper.find(Model).exists()).toBe(true);
  });

  it("shows CCWithoutActivation UI when continueWithoutActivationUI is true", () => {
    const wrapper = mount(
      <Provider store={store}>
        <ThankYou />
      </Provider>
    );

    // Update state to trigger CCWithoutActivation UI
    wrapper.find('button').simulate('click');
    expect(wrapper.find(CCWithoutActivation).exists()).toBe(true);
  });

  it("navigates to OTP page when showOTPPopup is called", () => {
    const mockNavigate = jest.fn();
    getUrl.getParameterByName = jest.fn().mockReturnValue("auth");

    const wrapper = mount(
      <Provider store={store}>
        <ThankYou />
      </Provider>
    );

    wrapper.instance().showOTPPopup();

    // Check that navigate was called
    expect(mockNavigate).toHaveBeenCalledWith("/otp");
  });

  it("handles form submission correctly", () => {
    const wrapper = mount(
      <Provider store={store}>
        <ThankYou />
      </Provider>
    );

    // Simulate form submission
    wrapper.find("form").simulate("submit");

    // Check if the page redirects as expected
    expect(window.location.href).toBe(`${process.env.REACT_APP_HOME_PAGE_URL}`);
  });

  it("triggers the popup back button handler correctly", () => {
    const wrapper = mount(
      <Provider store={store}>
        <ThankYou />
      </Provider>
    );

    // Simulate back button click
    wrapper.find("button").simulate("click");
    expect(wrapper.find(PopupModel).exists()).toBe(false);
  });

  // Snapshot test for the component rendering
  it("should match snapshot", () => {
    const wrapper = shallow(
      <Provider store={store}>
        <ThankYou />
      </Provider>
    );
    expect(wrapper).toMatchSnapshot();
  });
});
