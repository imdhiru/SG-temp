import React from "react";
import { render, screen, fireEvent } from "@testing-library/react";
import { Provider } from "react-redux";
import configureStore from "redux-mock-store";
import Text from "./Text"; // Adjust the import as per your file structure

// Mock services and actions
jest.mock("../../../utils/common/change.utils", () => ({
  fieldError: jest.fn(),
  fieldIdAppend: jest.fn(),
  getUrl: {
    getParameterByName: jest.fn(),
    getUpdatedStage: jest.fn(),
  },
  isFieldUpdate: jest.fn(),
  isFieldValueUpdate: jest.fn(),
}));
jest.mock("../../../services/validation-service", () => ({
  allowOnlyCharacter: jest.fn(),
}));

const mockStore = configureStore([]);
const setup = (initialState, props) => {
  const store = mockStore(initialState);

  return render(
    <Provider store={store}>
      <Text {...props} />
    </Provider>
  );
};

describe("Text Component", () => {
  let store;
  const props = {
    data: {
      logical_field_name: "referral_id_2",
      mandatory: "Yes",
      regex: "^[A-Za-z]+$",
      min_length: 3,
      rwb_label_name: "Referral Code",
    },
    handleCallback: jest.fn(),
  };

  beforeEach(() => {
    store = mockStore({
      stages: { stages: [], userInput: { applicants: {} } },
      fielderror: { error: {} },
      postalCode: { postalCode: {} },
      referralcode: { refer: false, referId: "", errormsg: "" },
      urlParam: { resume: false },
    });
  });

  it("renders without crashing", () => {
    setup(store.getState(), props);
    const inputElement = screen.getByPlaceholderText(/Enter referral code here/i);
    expect(inputElement).toBeInTheDocument();
  });

  it("calls the callback on change", () => {
    setup(store.getState(), props);
    const inputElement = screen.getByPlaceholderText(/Enter referral code here/i);

    fireEvent.change(inputElement, { target: { value: "ABC" } });
    expect(props.handleCallback).toHaveBeenCalledWith(props.data, "ABC");
  });

  it("shows error for mandatory field left empty", () => {
    setup(store.getState(), props);
    const inputElement = screen.getByPlaceholderText(/Enter referral code here/i);

    fireEvent.change(inputElement, { target: { value: "" } });
    fireEvent.blur(inputElement);

    expect(screen.getByText(/Referral Code cannot be empty/i)).toBeInTheDocument();
  });

  it("validates and shows error for invalid input", () => {
    setup(store.getState(), props);
    const inputElement = screen.getByPlaceholderText(/Enter referral code here/i);

    fireEvent.change(inputElement, { target: { value: "123" } });
    fireEvent.blur(inputElement);

    expect(screen.getByText(/Referral Code should match the required pattern/i)).toBeInTheDocument();
  });

  it("dispatches the referral ID to Redux store on change", () => {
    setup(store.getState(), props);
    const inputElement = screen.getByPlaceholderText(/Enter referral code here/i);

    fireEvent.change(inputElement, { target: { value: "REF123" } });
    expect(store.getActions()).toContainEqual({
      type: "referralcode/setReferralId",
      payload: "REF123",
    });
  });

  it("handles leading/trailing space validation", () => {
    setup(store.getState(), props);
    const inputElement = screen.getByPlaceholderText(/Enter referral code here/i);

    fireEvent.change(inputElement, { target: { value: " ABC " } });
    fireEvent.blur(inputElement);

    expect(screen.getByText(/Referral Code cannot have leading or trailing spaces/i)).toBeInTheDocument();
  });

  it("renders default value from state", () => {
    const stateWithReferralCode = {
      ...store.getState(),
      referralcode: { refer: true, referId: "DEFAULT_REF" },
    };
    setup(stateWithReferralCode, props);

    const inputElement = screen.getByPlaceholderText(/Enter referral code here/i);
    expect(inputElement).toHaveValue("DEFAULT_REF");
  });
});
