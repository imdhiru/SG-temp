import { getUrl, getDeviceType } from "../common/change.utils";
import { KeyWithAnyModel } from "../model/common-model";
import { CONSTANTS } from "../common/constants";
import { checkProductDetails } from "../../services/common-service";
 
export const getErrorType = (errorType: string) => {
    let errorTypeList : KeyWithAnyModel = {
        '': 'na',
        'STOP': 'Save and Next',
        'CONTINUE': 'Try Again',
        'RESUBMIT': 'Review',
        'CORRECT': 'Review',
        'LOGIN': 'Continue to Login',
        'ROSHAN_CONTINUE': 'Ok, Continue'
    }
    return errorTypeList[errorType];
 }
 
export const getUserType = (userType: string) => {
   let userTypeLIst : KeyWithAnyModel = {
    'ntb' : 'New to Bank',
    'etb' : 'Existing to Bank',
    'etc' : 'Existing to cards or casa',
    'ntc' : 'New to cards or casa',
    'ecc' : 'Existing to credit cards applying for bundle',
    'c01' : 'Non resident of SG',
    'eca' : 'Existing to casa applying for bundle',
    'mdd' : 'Multiple dedupe'
   }
   return userTypeLIst[userType];
}
 
export const getStepName = (stage: KeyWithAnyModel) => {
    const productsSelector =  stage.stages.stages[0].stageInfo.products;
    const steps: KeyWithAnyModel = checkProductDetails(productsSelector) ? CONSTANTS.NON_ETC_CASA : CONSTANTS.NON_ETC_CC;
    if (steps[stage.stages.stages[0].stageId]) {
        return steps[stage.stages.stages[0].stageId].name;
    } else if (stage.stages.stages[0].stageId === 'ffd-1') {
        return 'thank you'
    } else {
        return 'na';
    }
}
 
export const loginval = () => {
    const isIbanking = getUrl.getParameterByName("SSCode") || getUrl.getParameterByName('transfer-token') || getUrl.getUpdatedStage().ccplChannel =="IBK" || getUrl.getUpdatedStage().ccplChannel =="MBNK";
    
    if (isIbanking != null && getDeviceType() !== 'Mobile Website') {
        return 'Ibanking';
    }
    else if (isIbanking != null && getDeviceType() === 'Mobile Website') {
        return 'SC Mobile';
    }
    else {
        return 'RTOB';
    }
}


export const removeStageIds = (stageSelector:any) => {
  let default_seq = ['ld-1','bd-2','bd-3','doc','ad-1','ad-2','ACD','rp'];
  Eif(stageSelector &&
    stageSelector.stages &&
    stageSelector.stages.length > 0) {
    Iif(stageSelector.stages[0].stageInfo.applicants['auth_mode_a_1'] !== 'XN') {
      default_seq.splice(default_seq.indexOf('bd-2'), 1);
    }
    Iif(stageSelector.stages[0].stageInfo.products[0]['product_category'] !== 'PL') {
      default_seq.splice(default_seq.indexOf('ld-1'), 1);
    }
    Eif(!(stageSelector.stages[0].stageInfo.applicant_documents && stageSelector.stages[0].stageInfo.applicant_documents.length > 0)) {
      default_seq.splice(default_seq.indexOf('doc'), 1);
    }
    Iif(stageSelector.stages[0].stageInfo.applicants['credit_limit_consent_a_1'] === 'Y') {
      default_seq.splice(default_seq.indexOf('ad-2'), 1);
    }
    Eif(stageSelector.stages[0].stageInfo.products[0]['product_category'] !== 'CA' && stageSelector.stages[0].stageInfo.products[0]['product_category'] !== 'SA') {
      default_seq.splice(default_seq.indexOf('ACD'), 1);
      default_seq.splice(default_seq.indexOf('ad-1'), 1);
    }
  }
  return default_seq;
}
import { removeStageIds } from './yourModulePath';

describe('removeStageIds', () => {
  const defaultSeq = ['ld-1', 'bd-2', 'bd-3', 'doc', 'ad-1', 'ad-2', 'ACD', 'rp'];

  it('should return the default sequence when stageSelector is null or undefined', () => {
    expect(removeStageIds(null)).toEqual(defaultSeq);
    expect(removeStageIds(undefined)).toEqual(defaultSeq);
  });

  it('should remove "bd-2" if auth_mode_a_1 is not "XN"', () => {
    const stageSelector = {
      stages: [
        {
          stageInfo: {
            applicants: { auth_mode_a_1: 'YN' },
            products: [{ product_category: 'PL' }],
            applicant_documents: [{}],
          },
        },
      ],
    };
    expect(removeStageIds(stageSelector)).toEqual(
      defaultSeq.filter((id) => id !== 'bd-2')
    );
  });

  it('should remove "ld-1" if product_category is not "PL"', () => {
    const stageSelector = {
      stages: [
        {
          stageInfo: {
            applicants: { auth_mode_a_1: 'XN' },
            products: [{ product_category: 'CA' }],
            applicant_documents: [{}],
          },
        },
      ],
    };
    expect(removeStageIds(stageSelector)).toEqual(
      defaultSeq.filter((id) => id !== 'ld-1')
    );
  });

  it('should remove "doc" if applicant_documents is not provided or empty', () => {
    const stageSelector = {
      stages: [
        {
          stageInfo: {
            applicants: { auth_mode_a_1: 'XN' },
            products: [{ product_category: 'PL' }],
          },
        },
      ],
    };
    expect(removeStageIds(stageSelector)).toEqual(
      defaultSeq.filter((id) => id !== 'doc')
    );
  });

  it('should remove "ad-2" if credit_limit_consent_a_1 is "Y"', () => {
    const stageSelector = {
      stages: [
        {
          stageInfo: {
            applicants: { credit_limit_consent_a_1: 'Y' },
            products: [{ product_category: 'PL' }],
            applicant_documents: [{}],
          },
        },
      ],
    };
    expect(removeStageIds(stageSelector)).toEqual(
      defaultSeq.filter((id) => id !== 'ad-2')
    );
  });

  it('should remove "ACD" and "ad-1" if product_category is neither "CA" nor "SA"', () => {
    const stageSelector = {
      stages: [
        {
          stageInfo: {
            applicants: { auth_mode_a_1: 'XN' },
            products: [{ product_category: 'PL' }],
            applicant_documents: [{}],
          },
        },
      ],
    };
    expect(removeStageIds(stageSelector)).toEqual(
      defaultSeq.filter((id) => id !== 'ACD' && id !== 'ad-1')
    );
  });

  it('should apply multiple conditions correctly', () => {
    const stageSelector = {
      stages: [
        {
          stageInfo: {
            applicants: {
              auth_mode_a_1: 'YN',
              credit_limit_consent_a_1: 'Y',
            },
            products: [{ product_category: 'CA' }],
            applicant_documents: [],
          },
        },
      ],
    };
    expect(removeStageIds(stageSelector)).toEqual(
      defaultSeq.filter((id) => id !== 'bd-2' && id !== 'doc' && id !== 'ad-2')
    );
  });
});





import { getErrorType, getUserType, getStepName, loginval } from "./yourModule"; // Replace with actual file path
import { getUrl, getDeviceType } from "../common/change.utils";
import { checkProductDetails } from "../../services/common-service";
import { CONSTANTS } from "../common/constants";

jest.mock("../common/change.utils", () => ({
  getUrl: {
    getParameterByName: jest.fn(),
    getUpdatedStage: jest.fn()
  },
  getDeviceType: jest.fn()
}));

jest.mock("../../services/common-service", () => ({
  checkProductDetails: jest.fn()
}));

jest.mock("../common/constants", () => ({
  CONSTANTS: {
    NON_ETC_CASA: {
      "stage1": { name: "Stage 1 - CASA" },
      "stage2": { name: "Stage 2 - CASA" }
    },
    NON_ETC_CC: {
      "stage1": { name: "Stage 1 - Credit Card" },
      "stage2": { name: "Stage 2 - Credit Card" }
    }
  }
}));

describe("Utility functions", () => {
  describe("getErrorType", () => {
    it("should return the correct error message based on the error type", () => {
      expect(getErrorType("STOP")).toBe("Save and Next");
      expect(getErrorType("CONTINUE")).toBe("Try Again");
      expect(getErrorType("RESUBMIT")).toBe("Review");
      expect(getErrorType("UNKNOWN")).toBeUndefined();
      expect(getErrorType("")).toBe("na");
    });
  });

  describe("getUserType", () => {
    it("should return the correct user type description", () => {
      expect(getUserType("ntb")).toBe("New to Bank");
      expect(getUserType("etb")).toBe("Existing to Bank");
      expect(getUserType("unknown")).toBeUndefined();
      expect(getUserType("mdd")).toBe("Multiple dedupe");
    });
  });

  describe("getStepName", () => {
    const mockStage = {
      stages: {
        stages: [
          {
            stageId: "stage1",
            stageInfo: {
              products: {}
            }
          }
        ]
      }
    };

    it("should return the step name for NON_ETC_CASA if product details exist", () => {
      (checkProductDetails as jest.Mock).mockReturnValue(true);
      expect(getStepName(mockStage)).toBe("Stage 1 - CASA");
    });

    it("should return the step name for NON_ETC_CC if product details do not exist", () => {
      (checkProductDetails as jest.Mock).mockReturnValue(false);
      expect(getStepName(mockStage)).toBe("Stage 1 - Credit Card");
    });

    it("should return 'thank you' for stageId 'ffd-1'", () => {
      const mockStageWithFfd = { ...mockStage, stages: { stages: [{ stageId: "ffd-1" }] } };
      expect(getStepName(mockStageWithFfd)).toBe("thank you");
    });

    it("should return 'na' if stageId does not match any criteria", () => {
      const mockStageWithUnknownId = { ...mockStage, stages: { stages: [{ stageId: "unknown" }] } };
      expect(getStepName(mockStageWithUnknownId)).toBe("na");
    });
  });

  describe("loginval", () => {
    it("should return 'Ibanking' for valid SSCode and non-Mobile Website", () => {
      (getUrl.getParameterByName as jest.Mock).mockReturnValue("123");
      (getDeviceType as jest.Mock).mockReturnValue("Desktop");
      expect(loginval()).toBe("Ibanking");
    });

    it("should return 'SC Mobile' for valid SSCode and Mobile Website", () => {
      (getUrl.getParameterByName as jest.Mock).mockReturnValue("123");
      (getDeviceType as jest.Mock).mockReturnValue("Mobile Website");
      expect(loginval()).toBe("SC Mobile");
    });

    it("should return 'RTOB' if no valid SSCode or token exists", () => {
      (getUrl.getParameterByName as jest.Mock).mockReturnValue(null);
      expect(loginval()).toBe("RTOB");
    });
  });
});

